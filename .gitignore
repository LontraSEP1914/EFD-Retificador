# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib60/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a script, but as not everyone will
#  be running the script, they are ignored to avoid dragging them around.
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Translaions
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to Peps#582, Pipfile.lock is application specific and should
#   be committed to version control. By default, ignore Pipfile.lock files
#   at the root directory to manifest this behavior.
#   IGNORE_PROJECT_PIPFILE_LOCK=false   to override this behavior.
# Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to commit poetry.lock
#   to version control.
# poetry.lock

# PEP 582; __pypackages__ directory
__pypackages__/

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# IDE-specific files
.idea/
.vscode/
*.DS_Store